name: Detective CI

on:
  push:
    branches: [ main, master ]
  pull_request:

env:
  RUN_ID: ${{ github.run_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore dependencies
        run: |
          dotnet restore src/Detective/Detective.sln

      - name: Build solution
        run: |
          dotnet build src/Detective/Detective.sln -c Release -o build_output

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_output
          path: build_output

  # ===== Unit tests =====
  unit_tests:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build_output
          path: build_output

      - name: Run unit tests
        run: |
          cd src/Detective
          dotnet test UnitTests/UnitTests.csproj --no-build -o ../../build_output

      - name: Upload allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-unit
          path: build_output/allure-results
  
  # ===== Integration tests =====
  integration_tests:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    needs: unit_tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1
          POSTGRES_DB: detective_test
        ports:
          - 5432:5432
        options: --pull always

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build_output
          path: build_output

      - name: Run integration tests
        run: |
          cd src/Detective
          dotnet test IntegrationTests/IntegrationTests.csproj --no-build -o ../../build_output

      - name: Upload allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-integration
          path: build_output/allure-results

  # ===== E2E tests =====
  e2e_tests:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    needs: integration_tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1
          POSTGRES_DB: detective_test
        ports:
          - 5432:5432
        options: --pull always
    env:
      TEST_BASE_URL: http://localhost:5000
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Username=postgres;Password=1;Database=detective_test
      ASPNETCORE_ENVIRONMENT: Test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build_output
          path: build_output

      - name: Start web app (Kestrel) in background
        run: |
          cd src/Detective
          # Запускаем приложение в фоне, привязав к 0.0.0.0:5000
          # Убедитесь, что правильный проект запускается (замените путь к проекту, если нужно)
          dotnet run --project ./Server/Server.csproj --urls "http://0.0.0.0:5000" &
          echo "Waiting for web app to be ready..."
          for i in {1..30}; do
            if curl -sSf http://localhost:5000/health >/dev/null 2>&1 || curl -sSf http://localhost:5000/swagger >/dev/null 2>&1; then
              echo "Server is up"
              break
            fi
            echo "Waiting... ($i)"  
            sleep 2
          done
          sleep 10

      - name: Run E2E tests against real server
        run: |
          cd src/Detective
          TEST_BASE_URL=http://localhost:5000 dotnet test E2ETests/E2ETests.csproj --no-build -o ../../build_output

      - name: Upload allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: build_output/allure-results
    
    # ===== Allure Report =====
  allure_report:
    needs: [ unit_tests, integration_tests, e2e_tests ]
    if: always()
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    env:
      ALLURE_HISTORY: allure-history
      RUN_DIR: build_output/allure-results
      ALLURE_REPORT_DIR: allure-report
    steps:
      - uses: actions/checkout@v4
      
      # ---------- Load test report history ----------
      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: ${{ env.ALLURE_HISTORY }}
      
      
      # ---------- Download test results ----------
      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-unit
          path: build_output/allure-results
          
      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-integration
          path: build_output/allure-results
          
      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: build_output/allure-results
      
      # ---------- Build Allure Report ----------
      - name: Build Allure Report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: ${{ env.ALLURE_HISTORY }}
          allure_results: ${{ env.RUN_DIR }}
          allure_history: ${{ env.ALLURE_REPORT_DIR }}
      
      # ---------- Publish Allure Report ----------
      - name: Publish Allure Report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ${{ env.ALLURE_REPORT_DIR }}
